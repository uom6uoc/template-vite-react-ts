import { PostData, SortKey, SortOrder } from '~/api/posts.type';

type CompareFunction = (a: PostData, b: PostData, order: number) => number;

const sortOptions: Record<SortKey, CompareFunction> = {
  type: ({ type: a }, { type: b }, order) => {
    return a.localeCompare(b) * order;
  },
  title: ({ title: a }, { title: b }, order) => {
    return a.localeCompare(b) * order;
  },
  createdAt: ({ createdAt: a }, { createdAt: b }, order) => {
    return (new Date(b).getTime() - new Date(a).getTime()) * order;
  },
  views: ({ views: a }, { views: b }, order) => {
    return (b - a) * order;
  },
};

const sortPostsByOption = (
  posts: PostData[],
  option: SortKey,
  sortOrder: SortOrder = 'asc'
): PostData[] => {
  const compareFunction = sortOptions[option];

  if (!compareFunction) {
    return [...posts];
  }

  const orderMultiplier = sortOrder === 'asc' ? 1 : -1;

  return [...posts].sort((a, b) => compareFunction(a, b, orderMultiplier));
};

export { sortPostsByOption };
